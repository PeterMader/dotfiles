" Peter Mader's .vimrc 

" be iMproved, no vi compatibility
set nocompatible           

filetype plugin indent on

set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

" important! In order to display umlauts correctly
set encoding=utf-8

" hide abandoned buffers
set hidden

" do not redraw in macros
set lazyredraw

" set colorscheme
set background=dark
colorscheme apprentice

" GUI options
if has("gui_running")
    set guioptions-=m  " remove menu bar
    set guioptions-=T  " remove toolbar
    set guioptions-=r  " remove right-hand scroll bar
    set guioptions-=L  " remove left-hand scroll bar

    " maximize the GUI window
    " this does *not* maximize the window
    " TODO: find a way to maximize the window platform-independently.
    set lines=999 columns=999

    " set the GUI font
    if has("gui_macvim")
        set guifont=Menlo\ Regular:h14
    elseif has("gui_win32")
        set guifont=Consolas:h12:cANSI
    else
        set guifont=Inconsolata\ 13
    endif
else
    set t_Co=256
endif

if has("win32")
    " default file format in Windows
    set fileformat=dos

    " in Unix, Ctrl-Z pauses Vim and puts the shell in the foreground
    " this imitates this feature on Windows
    noremap <Ctrl-Z> :sh<CR>
else
    " default file types: UNIX
    set fileformat=unix
endif

" show existing tab with 4 spaces width
set tabstop=4
set softtabstop=4
" when indenting with '>', use 4 spaces width
set shiftwidth=4
" On pressing tab, insert 4 spaces
set expandtab

" set the leader key to ö
let mapleader="ö"

nnoremap <Leader>ü :ls<cr>:buffer<space>
nnoremap <Leader>l :bprevious<cr>
nnoremap <Leader>ä :bnext<cr>

nnoremap <Leader>w :w<cr>
nnoremap <Leader># :b#<cr>
nnoremap Q gqip

" <Leader>v opens .vimrc
nnoremap <Leader>v :tabedit ~/dotfiles/.vim/vimrc<cr>

" <Space><Space> deactivates hlsearch
nnoremap <silent> <Space><Space> :noh<cr>

" center search matches
nnoremap N Nzz
nnoremap n nzz

cnoremap %% %:h

" exchange ; and ,
nnoremap ; ,
nnoremap , ;

" move vertically by visual line
nnoremap j gj
nnoremap k gk

inoremap jk <ESC>
inoremap kj <ESC>

" fix Y so that is behaves like D
noremap Y y$

" <leader>. to repeat the last ex command
noremap <Leader>. @:

" <leader>q to repeat the last macro
noremap <Leader>q @@

" experimental: Enter for : (starting ex commands)
nnoremap <cr> :
vnoremap <cr> :

" use ctrl+HJKL to move window focus
noremap <c-h> <c-w>h
noremap <c-j> <c-w>j
noremap <c-k> <c-w>k
noremap <c-l> <c-w>l

" disable the arrow keys
inoremap <up>    <NOP>
inoremap <down>  <NOP>
inoremap <left>  <NOP>
inoremap <right> <NOP>

noremap <up>    <NOP>
noremap <down>  <NOP>
noremap <left>  <NOP>
noremap <right> <NOP>

vnoremap <Space><Tab> <Esc>/<++><Enter>"_c4l
map <Space><Tab> <Esc>/<++><Enter>"_c4l

augroup easy_close
    autocmd!
    " close quickfix & help with q
    autocmd FileType help,qf nnoremap <buffer> q :q<cr>
    " <c-t> instead of <ctrl-]>, which cannot 
    " be typed on many keyboards
    autocmd FileType help nnoremap <buffer> <c-t> <c-]>
augroup END

" keep at least 3 lines above or below the cursor
set scrolloff=3

" show hybrid line numbers
set number
set relativenumber

" visual autocomplete for command menu
set wildmenu

" search as characters are entered
set incsearch

" highlight search matches
set hlsearch

" show the ruler (info like cursor position and current time)
set ruler
set rulerformat=%55(%5l,%-6(%c%V%)\ %P%)

" show the status line
set laststatus=1

" enable syntax highlighting
syntax enable

" mark text after the 80th column in red
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%81v.\+/

set ignorecase
set smartcase

if has('win32')
    augroup templates
        autocmd BufNewFile *.tex 0r $HOME\dotfiles\templates\latex-template.tex
        autocmd BufNewFile *.html 0r $HOME\dotfiles\templates\html-template.html
        autocmd BufNewFile *.md 0r $HOME\dotfiles\templates\markdown-template.md
    augroup END
else 
    augroup templates
        autocmd BufNewFile *.tex 0r ~/dotfiles/templates/latex-template.tex
        autocmd BufNewFile *.html 0r ~/dotfiles/templates/html-template.html
        autocmd BufNewFile *.md 0r ~/dotfiles/templates/markdown-template.md
    augroup END
endif

function! s:set_makeprg (...)
    let prg = join(a:000)
    let prgescaped = substitute(join(a:000), ' ', '\\ ', 'g')
    exe "setlocal makeprg=" . prgescaped
    echo "'makeprg' set to '" . prg . "'"
endfunction

function! ToggleAutoBuild()
    if !exists('#AutoBuild#BufWritePost')
        augroup AutoBuild
            autocmd! * <buffer>
            autocmd BufWritePost <buffer> exe "make\|redraw!"
        augroup END
    else
        augroup AutoBuild
            autocmd!
        augroup END
    endif
endfunction

command! AutoBuild call ToggleAutoBuild()
command! -nargs=1 SetMake call s:set_makeprg(<f-args>)

noremap <Leader>ab :AutoBuild<CR>
noremap <Leader>m :make\|redraw!<CR>

" <Leader>pc to set makeprg to pandoc
noremap <Leader>pc :SetMake pandoc % -o .pdf<Left><Left><Left><Left>
